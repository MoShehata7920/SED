#### all to be organized & written in a better structure 

Our API is an MVC Architecture API consists of 3 main folders : 
    -Models.
    -Viewers.
    -Controllers.

Models : 
    -User Schema
    -Products Schema

Views  :
    -
    -
    -

Controllers : 
    -Users controller :
        -Register
        -Login
        -getting all users
        -get a single user by user id 
        -update a single user by user id 
        -delete a single user by user id 

    -Product controller : 
        -Adding new product
        -getting all products
        -get a single product by product id 
        -update a single product by product id 
        -delete a single product by product id 


--------------------------------------------#initialization main server-------------------------------------------------

-first we created new file app.js and we initialized server with express package after installing it 
-we installed nodemon package to monitor changes in code and restart server automatically
-we installed dotenv package to creat .env file to be our environment for our keys and credentials
-we used cors package to enable Cross-origin Resource Sharing 
-we used morgan package to get informations within every request to the server
-we used express.json to get data from body from server requests

--------------------------------------------creating Schemas-----------------------------------------------------------
# we used mongoose to create schemas and to connect to our database on mongoDb in app.js file 
# we used timestamps on schemas to trace documents time

@User Schema
-created models folder inside api folder and created User Schema which accepts accepts email and fullName and password
-added advanced options on the schema email and full name such as in fullName characters between 2 and 30 char and the email must valid email address form for example : test@gmail.com and it every email is unique 

@Product
-initialized product.js file and created the schema with mongoose 
-product schema accepts product Name , product description , quantity of product , product image and  product price 

--------------------------------------------creating routes-----------------------------------------------------------

@users 
-Register route : 
                    > established route forwarding in app.js 
                    > we imported our User schema 
                    >user enters his info and system checks at first if its a new email or its already exist , in the first case it returns an error message and in the second one it creates a user 
                    >there are a checker to check password and password confirmation fields 
                    >we used bcrypt package to hash user password to make everything safe


-Login route    :
                    > firstly server check if the email address that the user entered is registered on the database 
                    > if found it compare password and go on login process and return welcoming message with user full name in addition to token generated by jwt package containing user(email,id,fullName,isAdmin'if this user is admin')
                    > if not it returns error message either Wrong password or email not found and need to be registered first
                    >
                
-Google Auth    :       
                    > Google Api used to make it easier for users to access our application with a button 
                    > To implement this strategy we user Passport Version 0.5 "since it has no errors"
                    > within clicking on the button 'sign in with google' the user get redirected to google access permission page
                    > once user give us access he is automatically redirected to home 
                    > There are two conditions for this method wether the user is new to our app or he is already registered before.. we know that by searching into our database by user googleId if not found then this user is new so we create a new user , if found it just return user info
                    > we put all the config on passport-setup.js file
                    >we used cookie Session package to store user identity into cookies 
                    >added logout router 

-All Users      :   
                    > an Route for admin panel to show all registered users

-Single User    : 
                    > to show single user informations by user id 

-Update User    :
                    > to update single user informations by user id 
-Delete User    :
                    > to delete single user informations by user id 

-Forgot PW      : 
                    > to be finished 

----------------------------------------------------------------
-check-auth file contains some functions to validate the user login token and user access levels
----------------------------------------------------------------
*Email-verification with token * 
    >once User Register he automatically gets a verification email on his inbox
    >when he write this token on our form which takes this token 
    >our server compare it with our token stored in data base encrypter .. if matching user is verified and token document is deleted


    > used mailtrap and nodmailer packages
    > created a new schema for email verification token
    > recieving messages on mailtrap 
    > there are some conditions beside code explaining the constraints or the states that lead to errors or succes to be written ;)