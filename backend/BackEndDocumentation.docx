Our API is an MVC Architecture API consists of 3 main folders : 
    -Models.
    -Viewers.
    -Controllers.

Models : 
    -User Schema
    -Products Schema

Views  :
    -
    -
    -

Controllers : 
    -Users controller :
        -Register
        -Login
        -
    -Product controller : 
        -Adding new product
        -


--------------------------------------------#initialization main server-------------------------------------------------

-first we created new file app.js and we initialized server with express package after installing it 
-we installed nodemon package to monitor changes in code and restart server automatically
-we installed dotenv package to creat .env file to be our environment for our keys and credentials
-we used cors package to enable Cross-origin Resource Sharing 
-we used morgan package to get informations within every request to the server
-we used express.json to get data from body from server requests

--------------------------------------------creating Schemas--------------------------------------------------------

@User 
-installed mongoose and connected to it on app.js 
-created models folder inside api folder and created User Shema which accepts accepts email and fullName and password
-added advacend options on the schema email and full name such as in fullName characters between 2 and 30 char and the email musta valid email addres form for example : test@gmail.com and it every email is unique 
-added timestamps option to track time

@Product
-
-
-
-


--------------------------------------------creating routes--------------------------------------------------------

@users 
-Register route : 
                    > established route forwarding in app.js 
                    > we imported our User schema 
                    >user enters his info and system checks at first if its a new email or its already exist , in the first case it returns an error message and in the second one it creats a user 
                    >there are a checker to check password and password confirmation fields 
                    >we used bcrypt package to hash user password to make everything safe


-Login route    :
                    > firstly server check if the email address that the user entered is registered on the database 
                    > if found it compare password and go on login process and return welcoming message with user full name in addition to token generated by jwt package containing user(email,id,fullName,isAdmin'if this user is admin')
                    > if not it returns error message either Wrong password or email not found and need to be registered first

                    //to write : google auth , passport , check-auth file 