<style>
  #messages {
    display: flex;
    flex-direction: column;
    overflow-y: scroll;
    height: calc(100vh - 150px);
  }

  .message-wrapper {
    display: flex;
    flex-direction: column;
    margin-bottom: 5px;
  }

  .user-message {
    justify-content: flex-end;
  }

  .user-message .message-bubble {
    background-color: #7b83d3;
    color: #fffbfb;
  }

  .other-message .message-bubble {
    background-color: #e6e2f5;
    color: #333;
  }

  .message-bubble {
    padding: 10px;
    border-radius: 10px;
    max-width: 25%;
    word-wrap: break-word;
    margin-left: 10px;
  }

  .message-user {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    margin-right: 15px;
    margin-left: 30px;
    width: 50px;
    font-size: 12px;
    text-align: center;
    height: 50px;
    /* set the height of the message user div */
  }

  .message-user span {
    font-size: 12px;
    font-weight: bold;
  }

  #message-input {
    width: 100%;
    padding: 10px;
    font-size: 16px;
    border: none;
    border-top: solid 1px #ccc;
    border-bottom: solid 1px #ccc;
  }

  #send-button {
    background-color: #6370d0;
    color: white;
    border: none;
    padding: 10px;
    font-size: 16px;
  }

  #send-button:hover {
    opacity: 0.8;
  }
</style>

<h1>Chat</h1>

<div id="messages"></div>

<form>
  <input type="text" id="message-input" name="message" placeholder="Type your message...">
  <button type="submit" id="send-button">Send</button>
</form>

<script src="/socket.io/socket.io.js"></script>
<script>
  const socket = io();

  const currentUser = {
    id: '{{currentUser._id}}',
    name: '{{currentUser.name}}'
  };

  // Join conversation room and load previous messages
  socket.emit('joinConversation', '{{conversation._id}}');
  socket.on('previousMessages', (messages) => {
    const messagesDiv = document.getElementById('messages');
    messages.forEach((message) => {
      renderMessage(message);
    });
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
  });

  // Send message
  const sendMessage = () => {
    const text = document.getElementById('message-input').value.trim();
    if (text === '') return;

    const data = {
      conversationId: '{{conversation._id}}',
      senderId: currentUser.id,
      text,
    };
    socket.emit('sendMessage', data);

    document.getElementById('message-input').value = '';
  };

  // Receive message
  socket.on('messageReceived', (message) => {
    renderMessage(message);
    const messagesDiv = document.getElementById('messages');
    messagesDiv.scrollTop = messagesDiv.scrollHeight;
  });

  // Render message
  const renderMessage = (message) => {
  const messagesDiv = document.getElementById('messages');
  const newMessageWrapperDiv = document.createElement('div');
  const newMessageBubbleDiv = document.createElement('div');
  const newMessageUserDiv = document.createElement('div');
  const newMessageUserNameDiv = document.createElement('div');

  newMessageWrapperDiv.classList.add('message-wrapper');

  if (message.sender._id.toString() === currentUser.id.toString()) {
    newMessageWrapperDiv.classList.add('user-message');
  } else {
    newMessageWrapperDiv.classList.add('other-message');
  }

  newMessageUserDiv.classList.add('message-user');
  newMessageUserNameDiv.textContent = message.sender.userName;
  newMessageUserDiv.appendChild(newMessageUserNameDiv);
  newMessageWrapperDiv.appendChild(newMessageUserDiv);

  newMessageBubbleDiv.classList.add('message-bubble');
  newMessageBubbleDiv.textContent = message.text;

  newMessageWrapperDiv.appendChild(newMessageBubbleDiv);
  messagesDiv.appendChild(newMessageWrapperDiv);
};

  // Send message on form submit
  document.querySelector('form').addEventListener('submit', (e) => {
    e.preventDefault();
    sendMessage();
  });
</script>