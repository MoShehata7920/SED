Clean architecture with MVVM consist of 4 layers :
    -Application layer.
    -Data layer.
    -Domain layer.
    -Presentation layer.

Application layer :
    -Application class.
    -Dependency injection.
    -Application Routes manager (Navigation manager).
    -Application preferences (shared preferences to save data to local storage).
    -Extensions.
    -shared functions.

Data layer :
    -Data Sources (Remote , Local).
    -API interface.
    -Dio factory (Http implementer/logger interceptor).
    -Error handler.
    -Repository implementer.
    -API response (Serialization and json conversions).
    -Mapper (from data layer to domain layer).
    -Apply caching on Network responses.
    -Applying null safety.

Domain layer :
    -Models.
    -Repository interface.
    -UseCases.
    -Either left (Failure) and right  (Success).

Presentation layer (MVVM) :
    -Model.
    -View.
    -ViewModel.
    -UseCase Rule to connect to outside world.
    -Creating Data Class similar to Data class in kotlin.

Presentation layer (State Management):
    -State Management.
    -Stream Controller and RX Dart.

Presentation layer (State Renderer):
    -Full screen loading state.
    -Full screen error state.
    -Popup loading state.
    -Popup error state.
    -Empty state (no data).

Presentation layer (UI):
    -Splash screen.
    -OnBoarding screen.
    -Login screen.
    -Register screen.
    -Forgot Password screen.
    -Main screen (Home screen-Search screen-Notification screen-Setting screen).

Presentation layer (Localization):
    -English language.
    -Arabic language.
    -RTL and LTR in Widgets.
    -Adding English strings and Arabic strings.

Presentation layer (Resources):
    -How to extract (image , icons , colors , fonts and dimensions).
    -Assets Manager (images):
        -How to add Correct icons/images for android (mdpi/hdpi/xhdpi/xxhdpi/xxxhdpi).
        -How to add Correct icons/images for IOS (@1x/@2x/@3x).
    -Fonts Manager , Adding Fonts to Assets , Font weight Manager , Font Size , Style Manager , Light text Style , Regular text Style , Medium Style , SemiBold text Style , Bold text Style , language Manager , strings manager , values manager , padding values , Margin sizes , Size values and themeManager .

---------------------------------------------------------------------------------------------
-first in main file i need to create application class which will be single instance for the whole project , so if we have variable , we can get its value from any place in the project.
-default constructor : it means when i create instance anywhere , it will call this constructor
-i won't use default constructor bc i want all instances of to be the same to achieve single instance
-named instructor : it way which i can create instance with name and its private variable so i can't initiate MyApp in any other function 
-i created MyApp instance as static bc it has only one value and it won't change.
-factory MyApp() => _instance; means that i can get instance when i call it at anytime.
---------------------------------------------------------------------------------------------
all UI/UX will be in Presentation layer.
i added Color(0xff......) so it convert integer object into Color object.
i created it as static so i don't have to make instance of ColorManager and i can use it anywhere.
---------------------------------------------------------------------------------------------
i added fonts Assets folder.
updated pubspec.yaml and added Registered fonts assets on it .
---------------------------------------------------------------------------------------------
added values mangers with values which expected to ue for Margining , padding or appSizes .and its available to edit at anytime and add new values.
---------------------------------------------------------------------------------------------
created style manager file .
this function _getTextStyle will return textStyle and control the text style of whole project depends on its type.
---------------------------------------------------------------------------------------------
in app.dart file we used MaterialApp function and identify that the project will get its theme from getApplicationTheme function.
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
update 2/9/2023
---------------------------------------------------------------------------------------------

created theme manager file
this will be containing all default styles so it will be applied as default to all created controls. 
also default colors for the app. 
---------------------------------------------------------------------------------------------
created routes manager to manage the routes between the screens
created app constants and assets manager constants to add the static variables
---------------------------------------------------------------------------------------------
added the splash view screen 
added a timer so that after certain time it will navigate to another screen maybe later we can replace it with an actual loading function to load the startup settings.
---------------------------------------------------------------------------------------------
//these are members of MaterialApp :: starting the flow of the application by defining the onGenerateRoute function and initialize it with the first route the application would start with.
onGenerateRoute: RouteGenerator.getRoute,
initialRoute: Routes.splashRoute,
---------------------------------------------------------------------------------------------
important note::
to create proper images you have to give care about the dpi resolution not to get a distorted image, 
so for android for example there are different sizes like mdpi : 1.0x , hdpi : 1.5x , xhdpi : 2.0px and so on.
every one of which has its own size for image, luckily adobe xd generates them automatically.


---------------------------------------------------------------------------------------------
update_1 2/10/2023
---------------------------------------------------------------------------------------------

created the onboarding view and assets , toggling from splash screen to onboarding view after 3.5 seconds.
---------------------------------------------------------------------------------------------
we installed flutter svg package bc This package provides a wrapper around Dart implementations of SVG parsing, including SVG path data. In particular, it provides efficient BytesLoader implementations for package:vector_graphics. This package is easier to use but not as performant as using the vector_graphics and vector_graphics_compiler packages directly. Those packages allow you to do ahead-of-time compilation and optimization of SVGs, and offer some more performant satirization strategies at runtime.
---------------------------------------------------------------------------------------------
-this function _getBottomSheetWidget will control the bottom sheet of onboarding screen which contains arrows and hollow and solid circles.
-this function _getProperCircles will control if the circle is hollow or solid depends on currentIndex screen.
-functions _getPreviousIndex and _getNextIndex will be used for controlling arrows of onboarding screen which are infinite to move between onboarding screens slides.
---------------------------------------------------------------------------------------------
what is MVVM :
    Model
    View
    ViewModel

What is the goal of MVVM?
    MVVM is used to move business logic from View to ViewModel and Model.

what is Model ?
    -its a layer which contains some business logic, code validation and data classes.
    -ViewModel communicates with it for local data or data from server side.

what is ViewModel?
    -ViewModel is the controller between view and Model , which receives actions from view and request a response from Model layer(Calling API for example).
    -Once the Model has data the it returns to ViewModel
    -then ViewModel send this data to View .
    -ViewModel can be used by multiple views , which means a single ViewModel can provide data to more than one view.

what is the view ?
    -the view is where the user interacts with UI (Widgets) that are shown on the screen.
    -user can click on button to ask (send event to) ViewModel to do an action then ViewModel gets the data and send back it to update UI to view.
---------------------------------------------------------------------------------------------
-creating baseViewModel which will have all variables and all functions which can be used in many ViewModels bc clean code mean that i shouldn't create the same function more than once in the project.
-our baseViewModel will inherits from others so i will create it as abstract class.
-any view model has input(requests) and output(results) .
-this "void start()"  is used in baseViewModel which means that any view can make ViewModel start its job.
- i must have this function void dispose() so when ViewModel out of life cycle , ViewModel should finish all his jobs before it die to avoid any crash.
---------------------------------------------------------------------------------------------
-to create onboarding screens as MVVM we will create onboarding viewModel and onboarding view which will work with onboarding model.
-all logic will be on onBoardingViewModel.
-this class OnBoardingViewModelInputs in onBoardingViewModel will receives orders from view.
-this class OnBoardingViewModelOutputs in onBoardingViewModel will communicates with the model .
---------------------------------------------------------------------------------------------
what are Streams ?
    -A Stream is like a pipe, you put a value on the one end and if there's a listener on the other end that listener will receive that value.
    -A stream can have multiple listeners and all of those listeners will receive the same value when it's put in the pipeline. the way you put values on a stream is by using a StreamController.
    -Streams are the output of StreamController

what is Sink ?
    -A Sink resembles a Stream that flows the other way.
     Adding information events to an Event Sink channel that information into an associated Stream.
    -we can say that Sink is input of StreamController.

what is StreamController?
    A StreamController improves stream Management, naturally make a stream and sink and gives techniques to control a stream's conduct
---------------------------------------------------------------------------------------------
what is Clean architecture?
    it consists of 4 maun layers, every layer connect with the others .

    first layer (Data layer):
        it's the network layer. and its's responsible about data of tha application. it has the network data Source and local data Source.

    seconds layer (Domain layer):
        it has useCases , models and business logic. 

    third layer (Presentation layer):
        its responsible about application's UI.

    fourth layer (Application layer):
        it's contains shared functionalities and shared classes of the application.

-Network layer connect with domain layer by Mappers.
-Domain layer connect with presentation layer by UseCases.
---------------------------------------------------------------------------------------------
-we installed retrofit package, retrofit.dart is a type conversion dio client generator using source_gen.
-we installed analyzer package bc This package provides a library that performs static analysis of Dart code. It is useful for tool integration and embedding.End-users should use the dart analyze command-line tool to analyze their Dart code. 
-we installed dio package , bc its A powerful Http client for Dart, which supports Interceptors, Global configuration, FormData, Request Cancellation, File downloading, Timeout etc.
-we installed json_serializable package , bc  it Provides Dart Build System builders for handling JSON.
-we installed retrofit_generator package , its used in development only and its responsible about create auto generated files on the project with build runner.
-we installed build_runner package bc The build_runner package provides a concrete way of generating files using Dart code, outside of tools like pub. Unlike pub serve/build, files are always generated directly on disk, and rebuilds are incremental.
---------------------------------------------------------------------------------------------
to create the json file we used by using command "flutter pub get" then command  "flutter pub run build_runner build --delete-conflicting-outputs" and it will be auto generated.


---------------------------------------------------------------------------------------------
update_1 2/13/2023
---------------------------------------------------------------------------------------------
-added mapper from data layer to domain layer to deal with nulls
-installed dartz to use either concept has two possible types
    - left-> failure happened
    - right-> got data successfully
-added repository, request and failure.

---------------------------------------------------------------------------------------------
update_2 2/13/2023
---------------------------------------------------------------------------------------------
-added remote data sources
    -implemented login which has AuthenticationResponse piecewise getting the response from the appServiceClient
-installed and implemented network checker
    -added internet_connection_checker dependency > it checks if the device is already connected to the internet
    -implemented it at network_info by creating an abstract class and implements it with isConnected variable which checks if the device has connections
-implemented the repository at data layer
    -this implements the repository from domain layer.
    -implemented the login function which returns either<Failure, Authentication>
        -failure model if failure happened or no internet connection found
        -authentication if the data returned

-implemented the network response code and message (enum)
---------------------------------------------------------------------------------------------
-if API send any error or failure , i must have dataSources and errorHandler which send failure class .
-Dio is the responsible of Http requests and response.
- in errorHandler DioErrorType.response case will get the message and code which API send them back as response.
---------------------------------------------------------------------------------------------

---------------------------------------------------------------------------------------------
update_3 2/13/2023
---------------------------------------------------------------------------------------------
-installed pretty_dio_logger dependency for debugging the dio responds
-for debugging we can use that code it indicates if you at the debug model
    if (!kReleaseMode)
-added language manager at presentation layer
-installed shared_preference to cache local values
    -for example if the user chose to keep login in, we will save the token locally so that when the user restarts the application he won't be needing to login again.
-implemented UseCase
    -UseCase is considered to be a gate that presentation layer will use to communicate with domain and data layers.
    -it has in & out
        -in (input) -> this will be passed from viewModel
        -out (output) -> this will be passed from data layer to viewModel
---------------------------------16/2/2023----------------------------------------------------
-added login viewModel which has so sinks and two streams (one will be for userName and the other will be for password).
-we are going to make the login button looks disable if the user didn't fill any field of username or the password.
-the inputs for the login viewModel will be the userName field and the password field and login button .
-the outputs will be if the userName and password is valid and filled to activate the login button.
---------------------------------16/2/2023----------------------------------------------------
-use broadcast() in login viewModel to make the StreamController has many listeners to avoid bad state.
-i created _isPasswordValid and _isUserNameValid functions to check if this fields at lest has one letter and to return bool value to use it in map for stream.
---------------------------------16/2/2023----------------------------------------------------
-Data class is the class which have our data which we can update or copy of our data through it.
-we installed freezed package which will be code generator for data-classes/unions/pattern-matching/cloning.
-we used $ sign in freezed_data-classes file to identify that this class is freezed.
-we will use feature copyWith to update the argument of loginObject after the user set for password and userName.
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
update 2/17/2023
---------------------------------------------------------------------------------------------
instead of keep initializing instances we can use dependency injection to get over that.
    -installed get_it dependency bc it's  a simple Service Locator for Dart and Flutter projects with some additional goodies highly inspired by Splat. It can be used instead of InheritedWidget or Provider to access objects e.g. from your UI.
    -InitAppModule() contains all generic dependencies
        -we can define instances as singleton or lazy singleton
            -singleton: the instance will be initialized at compile time
            -lazy singleton: the instance will be initialized at run time
    -added dependencies at InitAppModule() as lazy singleton to save memory, since it will be initialized only when we ask for instance.
---------------------------------17/2/2023----------------------------------------------------
-in Login instance Module we create it as factory bc it will be called once in login screen to login by using email and password and won't use it again in the rest of app so i don't need to create it as singleton.
-i will call initLoginModule in route manger to initialize it before login.
-and i will call initAppModule in main.dart file bc it has to initialize before running the app and use it in the whole app next.
-to avoid crash bc of null value in running app bc async code in main.dart file i will use "WidgetsFlutterBinding.ensureInitialized();" to make sure that app won't start before making sure that await functions are responded and then run the app.
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
update 2/19/2023
---------------------------------------------------------------------------------------------
-continued implementing the state renderer
    -implemented the possible cases for the state widget
-installed lottie dependency to load images from json files
