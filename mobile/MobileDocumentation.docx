Clean architecture with MVVM consist of 4 layers :
    -Application layer.
    -Data layer.
    -Domain layer.
    -Presentation layer.

Application layer :
    -Application class.
    -Dependency injection.
    -Application Routes manager (Navigation manager).
    -Application preferences (shared preferences to save data to local storage).
    -Extensions.
    -shared functions.

Data layer :
    -Data Sources (Remote , Local).
    -API interface.
    -Dio factory (Http implementer/logger interceptor).
    -Error handler.
    -Repository implementer.
    -API response (Serialization and json conversions).
    -Mapper (from data layer to domain layer).
    -Apply caching on Network responses.
    -Applying null safety.

Domain layer :
    -Models.
    -Repository interface.
    -UseCases.
    -Either left (Failure) and right  (Success).

Presentation layer (MVVM) :
    -Model.
    -View.
    -ViewModel.
    -UseCase Rule to connect to outside world.
    -Creating Data Class similar to Data class in kotlin.

Presentation layer (State Management):
    -State Management.
    -Stream Controller and RX Dart.

Presentation layer (State Renderer):
    -Full screen loading state.
    -Full screen error state.
    -Popup loading state.
    -Popup error state.
    -Empty state (no data).

Presentation layer (UI):
    -Splash screen.
    -OnBoarding screen.
    -Login screen.
    -Register screen.
    -Forgot Password screen.
    -Main screen (Home screen-Search screen-Notification screen-Setting screen).

Presentation layer (Localization):
    -English language.
    -Arabic language.
    -RTL and LTR in Widgets.
    -Adding English strings and Arabic strings.

Presentation layer (Resources):
    -How to extract (image , icons , colors , fonts and dimensions).
    -Assets Manager (images):
        -How to add Correct icons/images for android (mdpi/hdpi/xhdpi/xxhdpi/xxxhdpi).
        -How to add Correct icons/images for IOS (@1x/@2x/@3x).
    -Fonts Manager , Adding Fonts to Assets , Font weight Manager , Font Size , Style Manager , Light text Style , Regular text Style , Medium Style , SemiBold text Style , Bold text Style , language Manager , strings manager , values manager , padding values , Margin sizes , Size values and themeManager .

---------------------------------------------------------------------------------------------
-first in main file i need to create application class which will be single instance for the whole project , so if we have variable , we can get its value from any place in the project.
-default constructor : it means when i create instance anywhere , it will call this constructor
-i won't use default constructor bc i want all instances of to be the same to achieve single instance
-named instructor : it way which i can create instance with name and its private variable so i can't initiate MyApp in any other function 
-i created MyApp instance as static bc it has only one value and it won't change.
-factory MyApp() => _instance; means that i can get instance when i call it at anytime.
---------------------------------------------------------------------------------------------
all UI/UX will be in Presentation layer.
i added Color(0xff......) so it convert integer object into Color object.
i created it as static so i don't have to make instance of ColorManager and i can use it anywhere.
---------------------------------------------------------------------------------------------
i added fonts Assets folder.
updated pubspec.yaml and added Registered fonts assets on it .
---------------------------------------------------------------------------------------------
added values mangers with values which expected to ue for Margining , padding or appSizes .and its available to edit at anytime and add new values.
---------------------------------------------------------------------------------------------
created style manager file .
this function _getTextStyle will return textStyle and control the text style of whole project depends on its type.
---------------------------------------------------------------------------------------------
in app.dart file we used MaterialApp function and identify that the project will get its theme from getApplicationTheme function.
---------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------
update 2/9/2023
---------------------------------------------------------------------------------------------

created theme manager file
this will be contatining all default styles so it will be applied as default to all created controls. 
also default colors for the app. 
---------------------------------------------------------------------------------------------
created routes manager to manage the routes between the screens
created app constants and assets manager constants to add the static variables
---------------------------------------------------------------------------------------------
added the splashview screen 
added a timer so that after certain time it will navigate to another screen maybe later we can replace it with an actual loading function to load the startup settings.
---------------------------------------------------------------------------------------------
//these are members of MaterialApp :: starting the flow of the application by defining the onGenerateRoute function and initialize it with the first route the application would start with.
onGenerateRoute: RouteGenerator.getRoute,
initialRoute: Routes.splashRoute,
---------------------------------------------------------------------------------------------
important note::
to create proper images you have to give care about the dpi resolution not to get a distorted image, 
so for android for example there are different sizes like mdpi : 1.0x , hdpi : 1.5x , xhdpi : 2.0px and so on.
every one of which has its own size for image, luckily adobe xd generates them automatically.


---------------------------------------------------------------------------------------------
update_1 2/10/2023
---------------------------------------------------------------------------------------------

created the onboarding view and assets , toggling from splash screen to onboarding view after 3.5 seconds.
---------------------------------------------------------------------------------------------
TODO // FROM LECTURE 25
